# Reads the first 2 chars from stdin and swaps them in memory if the first's
# byte representation is greater than the second's.

inputc F inputc

# Swap top two cells on F if cell to the left of the read-write head is smaller

# read left cell into global
ptg

# if global is 0: we don't want to divide by 0 and we know left is smaller
[
    # swap (left cell, which is 0, is already in the global byte)
    F' ptg setd 0 F gtp

    # prevent loop from running more than once
    gset 1
]

F' # revert cube to original position

# 0 is under the read-write head => the above loop ran or the swap isn't needed
# because the cell under the read-write head was initialized to 0, the least
# possible byte.
ptg
{
    # perform integer division of the left cell by the right cell
    # if the left cell is smaller, then the result is 0

    # store left cell in child cube
    F ptg v gtp ^

    # store right cell in child cube
    F' ptg v gtp ^

    # right cell value is already in global - divide left cell by right
    F /

    # if result is 0/if left cell smaller, then swap
    ptg F'
    [
        F v ptg ^ F' gtp v ptg ^ F gtp F'

        # just in case
        gsetd 1
    ]

    # prevent outer loop from running
    gsetd 0
}
